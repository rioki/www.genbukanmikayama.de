name: Automated Code Review

on:
  pull_request:
    types: [opened, edited]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    name: GPT-4 Code Review
    
    steps:
      - name: 'Set PR Fetch Depth'
        run: echo "PR_FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))" >> "${GITHUB_ENV}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ env.PR_FETCH_DEPTH }}

      - name: Custom Code Review and Comment
        uses: actions/github-script@v7
        env:
          FILE_PATTERN: '*.html *.twig *.css *.js *.yml *.json'
          CUSTOM_PROMPT: 'Please review to following code changes:\n'
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          script: |
            (async () => {
              const { execSync } = require('child_process');
              const filePattern = process.env.FILE_PATTERN;
              const customPrompt = process.env.CUSTOM_PROMPT;
              // Fetch diff based on the file pattern
              const diff = execSync(`git diff ${{ github.event.pull_request.base.sha }} HEAD -- ${filePattern}`).toString();
              
              // Request GPT-4 review
              const prompt     = `${customPrompt} ${diff}`;
              const max_tokens = Math.ceil(prompt.length / 4);

              const payload = {
                model: 'gpt-4o-mini',
                max_tokens: max_tokens,
                messages: [
                  {
                    role: 'user',
                    content: prompt
                  }
                ]
              };
              try {
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                  method: 'POST',
                  headers: {
                    'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(payload)
                });
                if (response.ok) {
                  const responseData = await response.json();
                  await github.rest.pulls.createReview({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: context.issue.number,
                    review_id: 1,
                    event: 'COMMENT',
                    body: responseData.choices[0].message.content
                  })                                
                } else {
                  console.error('Failed to get review:', await response.text());
                }
              } catch (error) {
                console.error('An error occurred:', error);
              }
            })();
        